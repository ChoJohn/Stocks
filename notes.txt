* PART 2 *
API calls
The API I'm using is a free API therefore has limitations.
Limitations:
- Only can make 5 call per 1min
- The API they have only allows to get 1 stock and discontinued multiple stock API
- Can't retrieve latest data. Only the data after market close

From your email, it sounds like you are interested to see if I can integrate an API.
So, I made some choices based on the limitation and time constraint to try and demonstrate
as much as I can.

Again, happy to go over all my decisons and go more into detail over email/call.

SECTION 1:
LOCATION: containers/Dashbaord.jsx line 57.
DETAIL: API call to get all the stock's 'latest' data.
ISSUE: Can only get 1 stock per API call. 
DECISION: For the sake of demonstrating my knowledge. I decided to just do 1 stock call.
    In this api call, I am using only 'IBM' because the API I'm using has a demo call I 
    can use as many times as I want. 
    Because the API can only retrieve 1 stock. My real solution would be to handle all
    this in the backend. Because the API gets the day summary. I would have a cron job to
    retrieve all the stocks after the market closes. Then in the backend format all the 
    stocks' data and send it to the frontend. That way, the frontend would have all the
    stocks' data from one API call that's made to the backend.

SECTION 2:
LOCATION: api/networks.js line 33.
DETAIL: Using demo api call because of the limitation of 5 call per 1min.
ISSUE: Limitation stated in DETAIL
DECISION: I decided to use the demo api call because of the limitations. Since you are 
    looking for how I would write an utility function to fetch multiple API calls, I have
    the actualy fetch call I would be making below commented out.

SECTION 3:
LOCATION: api.networks.js line 1.
DETAIL: Environment variables.
ISSUE: Environment variables should not be in Github.
DECISION: For the sake of this challenge, I hard coded the variables that would be in 
    env file. I am comfortable sharing the API key for alpha vantage. However, things
    like the access token for my broker API calls are another story. I commented out
    the way I would name and call the environment variables.


NOTES:
Task 1: You can find the API utility functions in api/networks.js
Task 2: You can see I have successfully retrieved the data in containers/Dashboard.jsx.
    And rendered it in the tables in the Reports components.
Task 3: I formatted and stored the retrieved data in Dashboard.jsx.

I decided to have a folder called api and create individual api files for api calls from
different api endpoints. What I would have done is handle all this in the backend. Then 
create new files for each page to keep everything organized (ex. Reports, Overview, etc.).
This was my first time integrating API with functional components. I am more experienced
using Actions/Sagas/Redux. I tried to created it based on that frame.

I only implemented using the API to get the 'latest' stock. I could not get the access
token from my broker. However, I believe this demonstrates what you wanted to see.
I have it set up so that I would be making API calls similarly. 


* PART 1 *
Background:
* This project is not complete! *
I recently got exposed to the stock market. With the recent GameStop and AMC shorting.
I thought it would be fun to build a dashboard to look at my portfolio. I recently 
fell in love with the Neumorphism design style. So I decided to put the two together!
This was a quick over the weekend fun project for myself. Therefore, did not fully design
or thought the whole project out. This is not my real portfolio, just meme stocks! :)
I thought I would share this project with you because it was my most recent project 
and shows a bit of what I can do! 

This project uses functional components. I did not implement Redux for this project. I
used the hook useReducer() because I wanted to practice hooks. I thought the use of 
useReducer hook can simulate part of my Redux experience. If you would like to see 
Redux, I could quickly put a project together and send it over. All my Redux projects 
were for companies and I do not have access/can't share their codebase.

If there are things you wish to see more of or wonder why I chose certain practices, please 
feel free to ask!

NOTES:
- DATA: All the data in the Data folder are placeholders for what would actually be sent
    from the backend. They are my format for my API calls. I also planned to have all the
    calculations to be done on the backend just like a normal server-side rendering should be.
    For now it is hardcoded on the frontend. 

- API: I also planned to use an API to get the latest stock market data which is why some 
    areas are left empty. Another API I would be using is from the brokerage firm that has my portfolio.
    This API would be used to get my up-to-date portfolio.

- DARK MODE: I've never done dark/light mode. I wasn't sure what the common practice for this was.
    I decided to just stick to pure css/react/javascript. The different options I thought
    of were:
    => styled-components
    => render the two different (light/dark) html/css separately. 
        ex return (dark mode div) vs return (light mode div) 
    => have conditional on the css name. 
        ex. isDarkModeOn ? 'dark-mode-css' : 'light-mode-css'
    
    I decided to go mix of rendering the two different html/css and conditional css names.
    The reason was because for styled-components, I would still have to do conditional on
    css names. I already had all the css done for light mode at this point. I would render 
    the html/css separately when pretty much all the tags needed to be changed. I know this 
    is not clean code. However, I never planned to release this or become anything.
    Just wanted to practice hooks and design a product with Neumorphism.
    
    WHAT I WOULD HAVE DONE DIFFERENTLY FOR DARK/LIGHT MODE
        - PLANNING: I would have planned the entire project out first. I decided to build this on a
        saturday morning and pump it out ASAP just for fun. I never intended to build
        light/dark mode. After the thought came to my mind, I had already built pretty much
        the entire thing. But I was excited to build it because I never done it before.
    
        - RESEARCH: I would have spent more time researching what the common practice for this is.
    
- CHARTS: I would create a dynmaic pie/table chart for more data analysis charts/graphs. Right now,
    I have it dynamically displaying the data, however as the project will contain more charts/graphs, I 
    could make all the charts/graph dynamic to keep the whole project consistent.

